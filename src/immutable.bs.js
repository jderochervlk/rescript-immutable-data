// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");

function fromArray(arr) {
  return arr.slice();
}

function set(t, i, v) {
  var c = t.slice();
  c[i] = v;
  return c;
}

function at(prim0, prim1) {
  return prim0.at(prim1);
}

function concatMany(prim0, prim1) {
  return Caml_splice_call.spliceObjApply(prim0, "concat", [prim1]);
}

function concat(t, a) {
  return [a].concat(t);
}

function copy(prim) {
  return prim.slice();
}

function copyAlllWithin(prim0, prim1) {
  return prim0.copyWithin(prim1);
}

function copyWithin(prim0, prim1, prim2, prim3) {
  return prim0.copyWithin(prim1, prim2, prim3);
}

function copyWithinToEnd(prim0, prim1, prim2) {
  return prim0.copyWithin(prim1, prim2);
}

function get(prim0, prim1) {
  return prim0[prim1];
}

function map(prim0, prim1) {
  return prim0.map(prim1);
}

function append(t, a) {
  return t.concat([a]);
}

function isEmpty(t) {
  return t.length === 0;
}

function head(t) {
  return t[0];
}

function tail(t) {
  if (t.length === 0) {
    return [];
  } else {
    return t.slice(1, t.length);
  }
}

function make(prim) {
  return Object.assign({}, prim);
}

function set$1(o, k, v) {
  var c = Object.assign({}, o);
  c[k] = v;
  return c;
}

function get$1(prim0, prim1) {
  return prim0[prim1];
}

function fromArray$1(prim) {
  return Object.fromEntries(prim);
}

function fromIterator(prim) {
  return Object.fromEntries(prim);
}

function toArray(prim) {
  return Object.entries(prim);
}

var Dict = {
  make: make,
  set: set$1,
  get: get$1,
  fromArray: fromArray$1,
  fromIterator: fromIterator,
  toArray: toArray
};

var $$Array = {
  fromArray: fromArray,
  isEmpty: isEmpty,
  head: head,
  tail: tail,
  toArray: fromArray,
  map: map,
  concat: concat,
  append: append,
  get: get,
  set: set,
  at: at,
  concatMany: concatMany,
  copy: copy,
  copyAlllWithin: copyAlllWithin,
  copyWithin: copyWithin,
  copyWithinToEnd: copyWithinToEnd
};

exports.$$Array = $$Array;
exports.Dict = Dict;
/* No side effect */
